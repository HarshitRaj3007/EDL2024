library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.jtag_uart.all;

entity top is
port(
			clk_1_clk            : in  std_logic;             -- clk
			reset_1_reset_n          : in  std_logic;             -- reset_n
			LED : out std_logic_vector(7 downto 0)
--			jtag_slave_chipselect  : in  std_logic                     := 'X';             -- chipselect
--			jtag_slave_address     : in  std_logic                     := 'X';             -- address
--			jtag_slave_read_n      : in  std_logic                     := 'X';             -- read_n
--			jtag_slave_readdata    : out std_logic_vector(31 downto 0);                    -- readdata
--			jtag_slave_write_n     : in  std_logic                     := 'X';             -- write_n
--			jtag_slave_writedata   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
--			jtag_slave_waitrequest : out std_logic;                                        -- waitrequest
--			jtag_irq_irq         : out std_logic  
);
end entity;


architecture describe of top is
signal chipselect : std_logic;
signal address: std_logic;
signal read_n: std_logic;
signal readdata: std_logic_vector(31 downto 0);
signal write_n : std_logic;
signal writedata : std_logic_vector(31 downto 0);
signal writerequest: std_logic;
signal irq: std_logic;



--component jtag_uart is
--		port (
--			clk            : in  std_logic                     := 'X';             -- clk
--			rst_n          : in  std_logic                     := 'X';             -- reset_n
--			av_chipselect  : in  std_logic                     := 'X';             -- chipselect
--			av_address     : in  std_logic                     := 'X';             -- address
--			av_read_n      : in  std_logic                     := 'X';             -- read_n
--			av_readdata    : out std_logic_vector(31 downto 0);                    -- readdata
--			av_write_n     : in  std_logic                     := 'X';             -- write_n
--			av_writedata   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
--			av_waitrequest : out std_logic;                                        -- waitrequest
--			av_irq         : out std_logic                                         -- irq
--		);
--	end component jtag_uart;

begin
jtag_uart0: jtag_uart port map(clk_1_clk, reset_1_reset_n, chipselect, address, read_n, readdata, write_n, writedata, writerequest, irq);


end architecture;