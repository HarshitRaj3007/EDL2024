//`default_nettype none

`define JTAG_UART

module jtaguart_comm(
        input  wire     clk,
        input  wire     button,
        output wire      LED
    );



    //============================================================
    // Optional JTAG UART
    //============================================================

    reg         jtag_uart_rd_done;
    reg [31:0]  jtag_uart_rdata;

`ifdef JTAG_UART
    wire        jtag_uart_cs;
    wire        jtag_uart_addr;
    wire        jtag_uart_waitrequest;
    wire        jtag_uart_write;
    wire [31:0] jtag_uart_wdata;
    wire        jtag_uart_read;
    wire [31:0] jtag_uart_readdata;

    wire        jtag_uart_dBus_cmd_ready;

    // JTAG UART has only 2 addresses. Map it to addresses 0x08 and 0x0C
    // Notice how I check the address down to bit 3 instead of bit 2 for 
    // the other registers!
//    assign jtag_uart_cs         = jtag_uart_sel;
//    assign jtag_uart_addr       = dBus_cmd_payload_address[2];
//    assign jtag_uart_read       = !dBus_cmd_payload_wr;
//    assign jtag_uart_write      = dBus_cmd_payload_wr;
//    assign jtag_uart_wdata      = dBus_cmd_payload_data;
//
//    assign jtag_uart_dBus_cmd_ready = !jtag_uart_waitrequest;

    always @(posedge clk) begin
        jtag_uart_rd_done <= 1'b0;
        if (jtag_uart_cs && jtag_uart_read && !jtag_uart_waitrequest) begin
            jtag_uart_rdata     <= jtag_uart_readdata;
            jtag_uart_rd_done   <= 1'b1;
        end
    end

	jtag_uart u_jtag_uart (
		.clk_clk        (clk),
		.reset_reset_n  (!reset),
		.av_chipselect  (jtag_uart_cs),
		.av_waitrequest (jtag_uart_waitrequest),
		.av_address     (jtag_uart_addr),
		.av_read_n      (!jtag_uart_read),
		.av_readdata    (jtag_uart_readdata),
		.av_write_n     (!jtag_uart_write),
		.av_writedata   (jtag_uart_wdata),
		.irq_irq        ()
	);
//`else
//    always @(dBus_cmd_valid) begin
//        jtag_uart_rd_done = 1'b0;
//        jtag_uart_rdata   = 32'd0;
//    end
//`endif

endmodule

